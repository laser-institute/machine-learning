---
title: "Same Model, Different Analytic Goals"
subtitle: "Code Along"
format:
  revealjs: 
    slide-number: c/t
    progress: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: img/LASERLogoB.png
    theme: [default, css/laser.scss]
    width: 1920
    height: 1080
    margin: 0.05
    footer: <a href=https://www.go.ncsu.edu/laser-institute>go.ncsu.edu/laser-institute
---

```{r}
#| include: false
```

```{r}
#| echo: false
# then load all the relevant packages
pacman::p_load(pacman, knitr, tidyverse, readxl)
```

# Getting started

## Process

- Create a .R file in `/module-1`
- Then, run copy and paste the code in this presentation as we talk through each step

## Quick discussion

- How comfortable are you with using RStudio? 
- What concerns do you have about coding?

**We'll take this part easily!**

# Code-along - Regression

## R Code

::: {.panel-tabset}

## 0

**Loading, setting up**

```{r}
#| eval: false
#| echo: true
library(tidyverse)
library(tidymodels)

starwars_recoded <- starwars %>% # built-in data available just by typing
    mutate(species_human = ifelse(species == "Human", "Human", "Not human")) # recoding species to create a categorical variable

starwars_recoded %>% 
    count(species) # how many humans are there?
```

## 1

**Fit model**

```{r}
#| eval: false
#| echo: true

m1 <- lm(species_human ~ height + mass, data = starwars)
```

## 2

**Interpret fit statistics, coefficients and standard errors, and p-values**

```{r}
#| eval: false
#| echo: true

summary(m1)
```

:::

## python code

```{python}
#| eval: false
#| echo: true

import pandas as pd
import statsmodels.api as sm

# Load and preprocess the data
starwars = pd.read_csv('path_to_starwars.csv')  # Load your data file
starwars['species_human'] = starwars['species'].apply(lambda x: 'Human' if x == 'Human' else 'Not human')
starwars['species_human'] = starwars['species_human'].astype('category').cat.codes

# Regression model
X_reg = starwars[['height', 'mass']]
y_reg = starwars['species_human']
X_reg = sm.add_constant(X_reg)  # Add a constant term for the intercept

reg_model = sm.Logit(y_reg, X_reg).fit()
print(reg_model.summary())
```

# Code-along - SML

## R Code

::: {.panel-tabset}

## 0

**Loading, setting up**

```{r}
#| eval: false
#| echo: true
library(tidyverse)
library(tidymodels)

starwars_recoded <- starwars %>% # built-in data available just by typing
    mutate(species_human = ifelse(species == "Human", "Human", "Not human")) # recoding species to create a categorical variable

starwars_recoded %>% 
    count(species) # how many humans are there?
```

## 1

**Split data**

```{r}
#| echo: true
#| eval: false

# We will skip this step for now, but know this is common!
```

## 2

**Engineer features**

```{r}
#| echo: true
#| eval: false
# predicting humans based on the independent effects of height and mass
my_rec <- recipe(species_human ~ height + mass, data = data_train)
```

## 3

**Specify recipe, model, and workflow**

```{r}
#| echo: true
#| eval: false
# specify model
my_mod <- logistic_reg() %>%
    set_engine("glm") %>%
    set_mode("classification")

# specify workflow
my_wf <- workflow() %>%
   add_model(my_mod) %>% 
    add_recipe(my_rec)
```

## 4

**Fit model**

```{r}
#| echo: true
#| eval: false

fit_model <- fit(my_wf, data = starwars_recoded)
```

## 5

**Evaluate accuracy**

```{r}
#| echo: true
#| eval: false

predictions <- predict(fit_model, starwars_recoded) %>% 
    bind_cols(starwars_recoded) %>% 
    mutate(species_human = as.factor(species_human))

predictions %>%
  metrics(species_human, .pred_class) %>%
  filter(.metric == "accuracy")
```

:::

## python code

```{python}
#| eval: false
#| echo: true

import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

# Load and preprocess the data
starwars = pd.read_csv('path_to_starwars.csv')  # Load your data file
starwars['species_human'] = starwars['species'].apply(lambda x: 'Human' if x == 'Human' else 'Not human')

# Prepare the features and target
X = starwars[['height', 'mass']]
y = starwars['species_human']

# Specify model and fit
clf = LogisticRegression()
clf.fit(X, y)

# Evaluate accuracy on the training data
y_pred = clf.predict(X)
print(classification_report(y, y_pred))
```

# Discussion

- What do you notice about the differences in the output between regression and SML?
- What do you notice is different about the modeling approach?